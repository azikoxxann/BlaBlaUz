import os
import telebot
import sqlite3
import re
import threading
import time
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv("API_TOKEN")  # –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot(API_TOKEN)

app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! üöõ"

def run_bot():
    bot.infinity_polling()

if __name__ == "__main__":
    from threading import Thread
    
while True:
    try:
        bot.send_message(1087235453, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ ü§ñ")
        time.sleep(45)  # –ö–∞–∂–¥—ã–µ 45 –°–µ–∫—É–Ω–¥
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞
CITIES = [
    "–ê–Ω–¥–∏–∂–∞–Ω", "–¢–∞—à–∫–µ–Ω—Ç", "–§–µ—Ä–≥–∞–Ω–∞", "–ë—É—Ö–∞—Ä–∞", "–î–∂–∏–∑–∞–∫", "–ö–∞—Ä—à–∏", "–ù–∞–≤–æ–∏", "–ù–∞–º–∞–Ω–≥–∞–Ω", "–°–∞–º–∞—Ä–∫–∞–Ω–¥", "–¢–µ—Ä–º–µ–∑",
    "–ì—É–ª–∏—Å—Ç–∞–Ω", "–£—Ä–≥–µ–Ω—á", "–ù—É–∫—É—Å"
]

# –°–ø–∏—Å–æ–∫ –º–∞—Ä–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
CARS = [
    "–î–∂–µ–Ω—Ç—Ä–∞", "–ö–æ–±–∞–ª—å—Ç", "–ö–∞–ø—Ç–∏–≤–∞", "–ú–∞–ª–∏–±—É", "–ê–≤–µ–æ", "–ù–µ–∫—Å–∏—è", "–°–ø–∞—Ä–∫", "–ö–∏–∞",
    "–û—Ä–ª–∞–Ω–¥–æ", "–¢—Ä–µ–∫–µ—Ä", "–≠–ø–∏–∫–∞", "–ö–∞–ø—Ç–∏–≤–∞", "–û–Ω–∏–∫—Å", "–≠–∫–≤–∏–Ω–æ–∫—Å", "–•—É–Ω–¥–∞–π", "–¢—Ä–∞–≤–µ—Ä—Å"
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("rides.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS rides (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    driver_id INTEGER,
                    phone TEXT,
                    from_city TEXT,
                    to_city TEXT,
                    car_model TEXT,
                    price INTEGER,
                    seats INTEGER,
                    created_at INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    phone TEXT)''')
conn.commit()

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['start'])
def start_cmd(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT phone FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        show_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +998xxxxxxxxx):")
        bot.register_next_step_handler(message, save_user_phone)

def save_user_phone(message):
    phone = message.text.strip()
    if not re.match(r"^\+998\d{9}$", phone):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998xxxxxxxxx:")
        bot.register_next_step_handler(message, save_user_phone)
        return
    cursor.execute("INSERT INTO users (user_id, phone) VALUES (?, ?)", (message.from_user.id, phone))
    conn.commit()
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    show_main_menu(message)

def show_main_menu(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üöó –í–æ–¥–∏—Ç–µ–ª—å", "üöå –ü–∞—Å—Å–∞–∂–∏—Ä")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ç–æ –≤—ã:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üöó –í–æ–¥–∏—Ç–µ–ª—å")
def driver_choice(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üöå –ü–∞—Å—Å–∞–∂–∏—Ä")
def passenger_choice(message):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üîç –ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É", "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏")
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É")
def create_ride(message):
    cursor.execute("SELECT COUNT(*) FROM rides WHERE driver_id=?", (message.from_user.id,))
    ride_count = cursor.fetchone()[0]
    if ride_count >= 2:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–æ–ª–µ–µ –¥–≤—É—Ö –ø–æ–µ–∑–¥–æ–∫.")
        return
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in CITIES:
        markup.add(city)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, get_to_city)

def get_to_city(message):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    from_city = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in CITIES:
        if city != from_city:
            markup.add(city)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, get_car_model, from_city)

def get_car_model(message, from_city):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    to_city = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for car in CARS:
        markup.add(car)
    markup.add("–î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
    bot.register_next_step_handler(message, process_car_model, from_city, to_city)

def process_car_model(message, from_city, to_city):
    car_model = message.text
    if car_model == "–î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        bot.register_next_step_handler(message, get_price, from_city, to_city)
    else:
        get_price(message, from_city, to_city, car_model)

def get_price(message, from_city, to_city, car_model=None):
    if car_model is None:
        car_model = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ–µ–∑–¥–∫—É:")
    bot.register_next_step_handler(message, get_seats, from_city, to_city, car_model)

def get_seats(message, from_city, to_city, car_model):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã!")
        return
    price = int(message.text)
    bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ?")
    bot.register_next_step_handler(message, save_ride, from_city, to_city, car_model, price)

def save_ride(message, from_city, to_city, car_model, price):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–µ—Å—Ç!")
        return
    seats = int(message.text)
    try:
        cursor.execute("SELECT phone FROM users WHERE user_id=?", (message.from_user.id,))
        phone = cursor.fetchone()[0]
        created_at = int(time.time())
        cursor.execute("INSERT INTO rides (driver_id, phone, from_city, to_city, car_model, price, seats, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                       (message.from_user.id, phone, from_city, to_city, car_model, price, seats, created_at))
        conn.commit()
        bot.send_message(message.chat.id, "üöó –í–∞—à–∞ –ø–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
def delete_ride(message):
    cursor.execute("SELECT * FROM rides WHERE driver_id=?", (message.from_user.id,))
    rides = cursor.fetchall()
    if not rides:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for ride in rides:
        markup.add(f"{ride[3]} ‚û° {ride[4]} (ID: {ride[0]})")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete_ride)

def confirm_delete_ride(message):
    try:
        ride_id = int(re.search(r"ID: (\d+)", message.text).group(1))
        cursor.execute("DELETE FROM rides WHERE id=? AND driver_id=?", (ride_id, message.from_user.id))
        conn.commit()
        bot.send_message(message.chat.id, "‚ùå –ü–æ–µ–∑–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
        show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–µ–∑–¥–∫–∏: {str(e)}")

@bot.message_handler(func=lambda message: message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
def edit_ride(message):
    cursor.execute("SELECT * FROM rides WHERE driver_id=?", (message.from_user.id,))
    rides = cursor.fetchall()
    if not rides:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for ride in rides:
        markup.add(f"{ride[3]} ‚û° {ride[4]} (ID: {ride[0]})")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, select_ride_to_edit)

def select_ride_to_edit(message):
    try:
        ride_id = int(re.search(r"ID: (\d+)", message.text).group(1))
        cursor.execute("SELECT * FROM rides WHERE id=? AND driver_id=?", (ride_id, message.from_user.id))
        ride = cursor.fetchone()
        if ride:
            edit_ride_details(message, ride)
        else:
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            edit_ride(message)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–µ–∑–¥–∫–∏: {str(e)}")

def edit_ride_details(message, ride):
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è", "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è", "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç")
    bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)
    bot.register_next_step_handler(message, handle_edit_choice, ride)

def handle_edit_choice(message, ride):
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for city in CITIES:
            markup.add(city)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, update_from_city, ride)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for city in CITIES:
            markup.add(city)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=markup)
        bot.register_next_step_handler(message, update_to_city, ride)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è":
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for car in CARS:
            markup.add(car)
        markup.add("–î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)
        bot.register_next_step_handler(message, update_car_model, ride)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞ –ø–æ–µ–∑–¥–∫—É:")
        bot.register_next_step_handler(message, update_price, ride)
    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:")
        bot.register_next_step_handler(message, update_seats, ride)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        edit_ride_details(message, ride)

def update_from_city(message, ride):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    new_from_city = message.text
    cursor.execute("UPDATE rides SET from_city=? WHERE id=?", (new_from_city, ride[0]))
    conn.commit()
    bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    show_main_menu(message)

def update_to_city(message, ride):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    new_to_city = message.text
    cursor.execute("UPDATE rides SET to_city=? WHERE id=?", (new_to_city, ride[0]))
    conn.commit()
    bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    show_main_menu(message)

def update_car_model(message, ride):
    car_model = message.text
    if car_model == "–î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        bot.register_next_step_handler(message, save_car_model, ride)
    else:
        cursor.execute("UPDATE rides SET car_model=? WHERE id=?", (car_model, ride[0]))
        conn.commit()
        bot.send_message(message.chat.id, "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        show_main_menu(message)

def save_car_model(message, ride):
    car_model = message.text
    cursor.execute("UPDATE rides SET car_model=? WHERE id=?", (car_model, ride[0]))
    conn.commit()
    bot.send_message(message.chat.id, "–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    show_main_menu(message)

def update_price(message, ride):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã!")
        return
    new_price = int(message.text)
    cursor.execute("UPDATE rides SET price=? WHERE id=?", (new_price, ride[0]))
    conn.commit()
    bot.send_message(message.chat.id, "–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    show_main_menu(message)

def update_seats(message, ride):
    if not message.text.isdigit():
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –º–µ—Å—Ç!")
        return
    new_seats = int(message.text)
    cursor.execute("UPDATE rides SET seats=? WHERE id=?", (new_seats, ride[0]))
    conn.commit()
    bot.send_message(message.chat.id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    show_main_menu(message)

@bot.message_handler(func=lambda message: message.text == "üîç –ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É")
def search_ride(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in CITIES:
        markup.add(city)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, search_to_city)

def search_to_city(message):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    from_city = message.text
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for city in CITIES:
        if city != from_city:
            markup.add(city)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=markup)
    bot.register_next_step_handler(message, show_rides, from_city)

def show_rides(message, from_city):
    if message.text not in CITIES:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    to_city = message.text
    cursor.execute("SELECT * FROM rides WHERE from_city=? AND to_city=?", (from_city, to_city))
    rides = cursor.fetchall()
    if rides:
        response = "üöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n"
        for r in rides:
            response += f"üìç {r[3]} ‚û° {r[4]}\nüöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {r[5]}\nüí∞ –¶–µ–Ω–∞: {r[6]} —Ä—É–±.\nü™ë –ú–µ—Å—Ç: {r[7]}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {r[2]}\n\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–µ–∑–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ –ø–æ–µ–∑–¥–æ–∫

@bot.message_handler(func=lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏")
def view_all_rides(message):
    cursor.execute("SELECT * FROM rides")
    rides = cursor.fetchall()
    if rides:
        response = "üöó –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏:\n"
        for r in rides:
            response += f"üìç {r[3]} ‚û° {r[4]}\nüöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {r[5]}\nüí∞ –¶–µ–Ω–∞: {r[6]} —Ä—É–±.\nü™ë –ú–µ—Å—Ç: {r[7]}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {r[2]}\n\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    show_main_menu(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–µ–∑–¥–æ–∫

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–µ–∑–¥–æ–∫
def delete_old_rides():
    while True:
        current_time = int(time.time())
        cursor.execute("DELETE FROM rides WHERE ? - created_at >= 86400", (current_time,))
        conn.commit()
        time.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–µ–∑–¥–æ–∫
threading.Thread(target=delete_old_rides, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {str(e)}")
        
  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_bot).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Gunicorn/Flask
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
